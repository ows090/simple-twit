{"version":3,"sources":["firebaseInstance.js","routes/Auth.js","components/Tweet.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","APPID","firebase","initializeApp","auth","db","firestore","storage","Auth","useState","newAccount","setNewAccount","email","setEmail","password","setPassword","error","setError","onChange","useCallback","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","result","signInWithEmailAndPassword","console","log","message","onToggle","prev","onSocialLogin","provider","firebaseInstance","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","credential","accessToken","user","onClick","style","cursor","type","placeholder","required","class","border","Tweet","tweet","isMine","editMode","setEditMode","editContent","setEditContent","onDelete","window","confirm","collection","doc","id","delete","refFromURL","imgUrl","onToggleEditMode","onChangeEditContent","onSubmitEditContent","targetDocRef","update","content","borderBottom","padding","margin","backgroundImage","backgroundPosition","backgroundSize","width","height","userId","Home","setTweet","tweets","setTweets","imgDataUrl","setImgDataUrl","onClearImage","onFileChange","files","length","alert","targetFile","reader","FileReader","onloadend","finishedEvent","readAsDataURL","fileRef","ref","child","uid","uuid4","putString","uploadTaskSnapshot","getDownloadURL","add","createdAt","Date","now","useEffect","onSnapshot","querySnapshot","tweetsArr","docs","map","data","sort","b","parseInt","accept","position","top","right","Profile","refreshUser","history","useHistory","myTweets","setMyTweets","displayName","newDisplayName","setNewDisplayName","onChangeDisplayName","onSubmitDisplayName","updateProfile","getMyTweets","fetchedTweets","where","orderBy","get","forEach","push","logoutHandler","signOut","replace","borderRadius","src","photoURL","alt","Navigation","to","Router","isLoggedIn","path","exact","component","from","App","isInitialized","setIsInitialized","setUser","currentUser","args","onAuthStateChanged","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAKMA,G,kBAAiB,CACnBC,OAAQC,0CACRC,WAAYD,8BACZE,UAAWF,cACXG,cAAeH,0BACfI,kBAAmBJ,eACnBK,MAAOL,ybAAYM,QAGvBC,IAASC,cAAcV,GAEhB,IAAMW,EAAOF,IAASE,OAChBC,EAAKH,IAASI,YACdC,EAAUL,IAASK,UACjBL,IAAf,E,OC6FeM,EA9GF,WAAO,IAAD,EACqBC,oBAAS,GAD9B,mBACRC,EADQ,KACIC,EADJ,OAEWF,mBAAS,IAFpB,mBAERG,EAFQ,KAEDC,EAFC,OAGiBJ,mBAAS,IAH1B,mBAGRK,EAHQ,KAGEC,EAHF,OAIWN,mBAAS,IAJpB,mBAIRO,EAJQ,KAIDC,EAJC,KAMTC,EAAWC,uBAAY,SAACC,GAAO,IAAD,EAG5BA,EADAC,OAAUC,EAFkB,EAElBA,KAAMC,EAFY,EAEZA,MAEpB,MAAa,UAATD,EAAyBT,EAASU,GACzB,aAATD,EAA4BP,EAAYQ,QAA5C,IACD,IAEGC,EAAWL,sBAAW,uCACxB,WAAOC,GAAP,eAAAK,EAAA,yDACIL,EAAEM,iBADN,UAIYhB,EAJZ,gCAK2BN,EAAKuB,+BAChBf,EACAE,GAPhB,OAKYc,EALZ,+CAU2BxB,EAAKyB,2BAChBjB,EACAE,GAZhB,QAUYc,EAVZ,eAeQE,QAAQC,IAAI,0BAA2BH,GAf/C,kDAiBQE,QAAQd,MAAR,MACAC,EAAS,KAAMe,SAlBvB,0DADwB,sDAsBxB,CAACpB,EAAOE,EAAUJ,IAGhBuB,EAAWd,uBAAY,WACzBR,GAAc,SAACuB,GAAD,OAAWA,OAC1B,IAEGC,EAAgBhB,sBAAW,uCAAC,WAAOC,GAAP,mBAAAK,EAAA,sDACtBH,EAASF,EAAEC,OAAXC,KADsB,KAGtBA,EAHsB,OAIrB,WAJqB,OAOrB,WAPqB,6BAKtBc,EAAW,IAAIC,EAAiBjC,KAAKkC,mBALf,kCAQtBF,EAAW,IAAIC,EAAiBjC,KAAKmC,mBARf,uFAcLnC,EAAKoC,gBAAgBJ,GAdhB,QAcpBR,EAdoB,OAgB1BE,QAAQC,IAAI,wBACZD,QAAQC,IAAI,eAAgBH,EAAOa,WAAWC,aAC9CZ,QAAQC,IAAI,SAAUH,EAAOe,MAlBH,kDAoB1Bb,QAAQd,MAAR,MACAC,EAAS,KAAMe,SArBW,0DAAD,sDAuB9B,IAEH,OACI,gCACI,sBAAMY,QAASX,EAAUY,MAAO,CAAEC,OAAQ,WAA1C,SACKpC,EAAa,kBAAoB,sBAEtC,uBAAMc,SAAUA,EAAhB,UACI,uBACIuB,KAAK,QACLC,YAAY,QACZC,UAAQ,EACR1B,MAAOX,EACPU,KAAK,QACLJ,SAAUA,IAEd,uBACI6B,KAAK,WACLC,YAAY,WACZ1B,KAAK,WACL2B,UAAQ,EACR/B,SAAUA,IAEd,wBAAQ6B,KAAK,SAAb,SACKrC,EAAa,UAAY,cAGlC,gCACI,wBAAQY,KAAK,SAASsB,QAAST,EAA/B,kCAGA,wBAAQb,KAAK,SAASsB,QAAST,EAA/B,qCAIHnB,GACG,qBAAKkC,MAAM,gBAAgBL,MAAO,CAAEM,OAAQ,iBAA5C,SACKnC,Q,QCvBNoC,EAhFD,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAAa,EACD7C,oBAAS,GADR,mBAC1B8C,EAD0B,KAChBC,EADgB,OAEK/C,mBAAS,IAFd,mBAE1BgD,EAF0B,KAEbC,EAFa,KAI3BC,EAAWxC,sBAAW,sBAAC,sBAAAM,EAAA,kEAECmC,OAAOC,QAAQ,iBAFhB,iEAIfxD,EAAGyD,WAAW,UAAUC,IAAIV,EAAMW,IAAIC,SAJvB,uBAKf1D,EAAQ2D,WAAWb,EAAMc,QAAQF,SALlB,yDAOrBnC,QAAQd,MAAR,MAPqB,0DAS1B,IAEGoD,EAAmBjD,uBAAY,WACjCqC,GAAY,SAACtB,GAAD,OAAWA,OACxB,IAEGmC,EAAsBlD,uBAAY,SAACC,GACrCsC,EAAetC,EAAEC,OAAOE,SACzB,IAEG+C,EAAsBnD,sBAAW,uCACnC,WAAOC,GAAP,eAAAK,EAAA,6DACIL,EAAEM,iBACI6C,EAAelE,EAAGyD,WAAW,UAAUC,IAAIV,EAAMW,IAF3D,kBAIcO,EAAaC,OAAO,CACtBC,QAAShB,IALrB,OAOQC,EAAe,IACfF,GAAY,GARpB,gDAUQ1B,QAAQC,IAAR,MAVR,yDADmC,sDAcnC,CAAC0B,EAAaJ,EAAMW,KAExB,OACI,sBACInB,MAAO,CACH6B,aAAc,kBACdC,QAAS,OACTC,OAAQ,UAJhB,UAOI,6BAAKvB,EAAMoB,UACVpB,EAAMc,QACH,qBACItB,MAAO,CACHgC,gBAAgB,OAAD,OAASxB,EAAMc,OAAf,KACfW,mBAAoB,SACpBC,eAAgB,QAChBC,MAAO,QACPC,OAAQ,WAIpB,8BAAM5B,EAAM6B,SACX5B,GAAU,wBAAQV,QAASe,EAAjB,oBACVL,IAAWC,GACR,wBAAQX,QAASwB,EAAjB,kBAEHb,GACG,uBAAM/B,SAAU8C,EAAhB,UACI,0BACI/C,MAAOkC,EACPvC,SAAUmD,IAEd,gCACI,wBAAQtB,KAAK,SAAb,kBACA,wBAAQH,QAASwB,EAAjB,8B,QCmETe,EAzIF,SAAC,GAAc,IAAZxC,EAAW,EAAXA,KAAW,EACGlC,mBAAS,IADZ,mBAChB4C,EADgB,KACT+B,EADS,OAEK3E,mBAAS,IAFd,mBAEhB4E,EAFgB,KAERC,EAFQ,OAGa7E,mBAAS,MAHtB,mBAGhB8E,EAHgB,KAGJC,EAHI,KAKjBC,EAAetE,uBAAY,WAC7BqE,EAAc,QACf,CAACA,IACEtE,EAAWC,uBAAY,SAACC,GAAO,IAAD,EACRA,EAAEC,OAAlBC,EADwB,EACxBA,KAAMC,EADkB,EAClBA,MACD,UAATD,GACA8D,EAAS7D,KAEd,IAEGmE,EAAevE,uBAAY,SAACC,GAC9B,IAAMuE,EAAQvE,EAAEC,OAAOsE,MACvB,GAAIA,EAAMC,OAAS,EACf,OAAOC,MAAM,yCACjB,IAAMC,EAAaH,EAAM,GACnBI,EAAS,IAAIC,WACnBD,EAAOE,UAAY,SAACC,GAChBV,EAAcU,EAAc7E,OAAOO,SAEvCmE,EAAOI,cAAcL,KACtB,IAEGtE,EAAWL,sBAAW,uCACxB,WAAOC,GAAP,mBAAAK,EAAA,yDACIL,EAAEM,iBADN,UAIY6D,EAJZ,wBAKkBa,EAAU7F,EACX8F,MACAC,MAFW,UAEF3D,EAAK4D,IAFH,YAEUC,gBAPtC,SAQ6CJ,EAAQK,UACrClB,EACA,YAVhB,cAQkBmB,EARlB,gBAY2BA,EAAmBL,IAAIM,iBAZlD,cAYYxC,EAZZ,iBAakB9D,EAAGyD,WAAW,UAAU8C,IAAI,CAC9BnC,QAASpB,EACTwD,UAAWC,KAAKC,MAChB7B,OAAQvC,EAAK4D,IACbpC,WAjBhB,iDAoBkB9D,EAAGyD,WAAW,UAAU8C,IAAI,CAC9BnC,QAASpB,EACTwD,UAAWC,KAAKC,MAChB7B,OAAQvC,EAAK4D,MAvB7B,QA0BQnB,EAAS,IACTI,EAAc,MA3BtB,kDA6BQ1D,QAAQd,MAAR,MA7BR,0DADwB,sDAiCxB,CAACqC,EAAOkC,EAAY5C,EAAK4D,MAgB7B,OAdAS,qBAAU,WACN3G,EAAGyD,WAAW,UAAUmD,YAAW,SAACC,GAChC,IAAMC,EAAYD,EAAcE,KAAKC,KAAI,SAACtD,GAAD,oBACrCC,GAAID,EAAIC,IACLD,EAAIuD,WAEXhC,EACI6B,EAAUI,MACN,SAAC9F,EAAG+F,GAAJ,OAAUC,SAASD,EAAEX,WAAaY,SAAShG,EAAEoF,oBAI1D,IAGC,qCACI,uBAAMrF,SAAUA,EAAhB,UACI,8BACI,uBACIuB,KAAK,OACLzB,KAAK,QACLC,MAAO8B,EACPnC,SAAUA,EACV8B,YAAY,0BAGpB,gCACI,uBACID,KAAK,OACL2E,OAAO,UACPxG,SAAUwE,IAEd,8BACKH,GACG,qBACI1C,MAAO,CACHgC,gBAAgB,OAAD,OAASU,EAAT,KACfT,mBAAoB,SACpBC,eAAgB,QAChBC,MAAO,QACPC,OAAQ,QACR0C,SAAU,YAPlB,SAUI,wBACI9E,MAAO,CACH8E,SAAU,WACVC,IAAK,MACLC,MAAO,MACP/E,OAAQ,WAEZF,QAAS6C,EAPb,sBAehB,wBAAQ1C,KAAK,SAAb,sBAEJ,8BACKsC,GACGA,EAAOgC,KAAI,SAAChE,GAAD,OACP,cAAC,EAAD,CAEIA,MAAOA,EACPC,OAAQX,EAAK4D,MAAQlD,EAAM6B,QAFtB7B,EAAMW,aChDxB8D,EA/EC,SAAC,GAA2B,IAAzBnF,EAAwB,EAAxBA,KAAMoF,EAAkB,EAAlBA,YACfC,EAAUC,cADuB,EAEPxH,mBAAS,IAFF,mBAEhCyH,EAFgC,KAEtBC,EAFsB,OAGK1H,mBAASkC,EAAKyF,aAHnB,mBAGhCC,EAHgC,KAGhBC,EAHgB,KAIjCC,EAAsBpH,uBAAY,SAACC,GACrCkH,EAAkBlH,EAAEC,OAAOE,SAC5B,IAEGiH,EAAsBrH,sBAAW,uCACnC,WAAOC,GAAP,SAAAK,EAAA,yDACIL,EAAEM,iBACE2G,IAAmB1F,EAAKyF,YAFhC,0EAIczF,EAAK8F,cAAc,CACrBL,YAAaC,IALzB,OAOQN,IAPR,gDASQjG,QAAQd,MAAR,MATR,yDADmC,sDAanC,CAACqH,EAAgB1F,EAAMoF,IAGrBW,EAAcvH,sBAAW,sBAAC,4BAAAM,EAAA,6DACtBkH,EAAgB,GADM,SAEAtI,EACvByD,WAAW,UACX8E,MAAM,SAAU,KAAMjG,EAAK4D,KAC3BsC,QAAQ,YAAa,QACrBC,MANuB,cAOdC,SAAQ,SAAChF,GACnB4E,EAAcK,KAAd,aAAqBhF,GAAID,EAAIC,IAAOD,EAAIuD,YAE5Ca,EAAYQ,GAVgB,2CAW7B,CAAChG,EAAK4D,MAEH0C,EAAgB9H,sBAAW,sBAAC,sBAAAM,EAAA,sEACxBrB,EAAK8I,UADmB,OAE9BlB,EAAQmB,QAAQ,KAFc,2CAG/B,CAACnB,IAMJ,OAJAhB,qBAAU,WACN0B,MACD,CAACA,IAGA,qCACI,gCACI,8BACI,qBACI7F,MAAO,CACHmC,MAAO,QACPC,OAAQ,QACRmE,aAAc,OAElBC,IAAK1G,EAAK2G,SACVC,IAAI,kBAGZ,wBAAQ3G,QAASqG,EAAjB,uBAEJ,uBAAMzH,SAAUgH,EAAhB,UACI,uBACIzF,KAAK,OACLxB,MAAO8G,EACPnH,SAAUqH,IAEd,wBAAQxF,KAAK,SAAb,uBAEJ,8BACKmF,EAASb,KAAI,SAAChE,GAAD,OACV,cAAC,EAAD,CAAsBA,MAAOA,EAAOC,QAAQ,GAAhCD,EAAMW,aC/DvBwF,EAXI,SAAC,GAAY,IAAX7G,EAAU,EAAVA,KACjB,OACI,8BACI,+BACI,6BAAI,cAAC,IAAD,CAAM8G,GAAG,IAAT,oBACJ,6BAAI,eAAC,IAAD,CAAMA,GAAG,WAAT,UAAqB9G,EAAKyF,YAA1B,wBCwBLsB,EAzBA,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,WAAYhH,EAAwB,EAAxBA,KAAMoF,EAAkB,EAAlBA,YAChC,OACI,eAAC,IAAD,WACK4B,GAAc,cAAC,EAAD,CAAYhH,KAAMA,IACjC,eAAC,IAAD,WACKgH,EACG,qCACI,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAArB,SACI,cAAC,EAAD,CAAMlH,KAAMA,MAEhB,cAAC,IAAD,CAAOiH,KAAK,WAAWC,OAAK,EAA5B,SACI,cAAC,EAAD,CAASlH,KAAMA,EAAMoF,YAAaA,SAI1C,mCACI,cAAC,IAAD,CAAO6B,KAAK,IAAIC,OAAK,EAACC,UAAWtJ,MAGzC,cAAC,IAAD,CAAUuJ,KAAK,IAAIN,GAAG,aC6BvBO,EAlDH,WAAO,IAAD,EAC4BvJ,oBAAS,GADrC,mBACPwJ,EADO,KACQC,EADR,OAEUzJ,mBAAS,MAFnB,mBAEPkC,EAFO,KAEDwH,EAFC,KAGRpC,EAAc5G,uBAAY,WAC5B,IAAMwB,EAAOvC,EAAKgK,YAClBD,EAAQ,CACJ/B,YAAazF,EAAKyF,YAClB7B,IAAK5D,EAAK4D,IACV+C,SAAU3G,EAAK2G,SACfb,cAAe,SAAC4B,GAAD,OAAU1H,EAAK8F,cAAc4B,QAEjD,IAmBH,OAlBArD,qBAAU,WACN5G,EAAKkK,oBAAmB,SAAC3H,GAarB,OAVIwH,EAFAxH,EAEQ,CACJyF,YAAazF,EAAKyF,YAClB7B,IAAK5D,EAAK4D,IACV+C,SAAU3G,EAAK2G,SACfb,cAAe,SAAC4B,GAAD,OAAU1H,EAAK8F,cAAc4B,KAIxC,MAELH,GAAiB,QAE7B,IAGC,mCACKD,EACG,qCACI,cAAC,EAAD,CACIN,WAAYY,QAAQ5H,GACpBA,KAAMA,EACNoF,YAAaA,IAEjB,wDACwB,IAAIjB,MAAO0D,iBACzB,OAGd,gDC5ChBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.c9b2ea60.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_APIKEY,\n    authDomain: process.env.REACT_APP_AUTHDOMAIN,\n    projectId: process.env.REACT_APP_PROJECTID,\n    storageBucket: process.env.REACT_APP_STORAGEBUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID,\n    appId: process.env.APPID,\n};\n\nfirebase.initializeApp(firebaseConfig); //initialze firebase and return firebase instance\n\nexport const auth = firebase.auth();\nexport const db = firebase.firestore();\nexport const storage = firebase.storage();\nexport default firebase;\n","import React, { useCallback, useState } from 'react';\nimport firebaseInstance, { auth } from 'firebaseInstance';\nconst Auth = () => {\n    const [newAccount, setNewAccount] = useState(false);\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n\n    const onChange = useCallback((e) => {\n        const {\n            target: { name, value },\n        } = e;\n        if (name === 'email') return setEmail(value);\n        if (name === 'password') return setPassword(value);\n    }, []);\n\n    const onSubmit = useCallback(\n        async (e) => {\n            e.preventDefault();\n            try {\n                let result;\n                if (newAccount) {\n                    result = await auth.createUserWithEmailAndPassword(\n                        email,\n                        password\n                    );\n                } else {\n                    result = await auth.signInWithEmailAndPassword(\n                        email,\n                        password\n                    );\n                }\n                console.log('login success message: ', result);\n            } catch (error) {\n                console.error(error);\n                setError(error.message);\n            }\n        },\n        [email, password, newAccount]\n    );\n\n    const onToggle = useCallback(() => {\n        setNewAccount((prev) => !prev);\n    }, []);\n\n    const onSocialLogin = useCallback(async (e) => {\n        const { name } = e.target;\n        let provider;\n        switch (name) {\n            case 'google':\n                provider = new firebaseInstance.auth.GoogleAuthProvider();\n                break;\n            case 'github':\n                provider = new firebaseInstance.auth.GithubAuthProvider();\n                break;\n            default:\n                break;\n        }\n        try {\n            const result = await auth.signInWithPopup(provider);\n            //this gives you a github access token\n            console.log('social login success');\n            console.log('accessToken:', result.credential.accessToken);\n            console.log('user: ', result.user);\n        } catch (error) {\n            console.error(error);\n            setError(error.message);\n        }\n    }, []);\n\n    return (\n        <div>\n            <span onClick={onToggle} style={{ cursor: 'pointer' }}>\n                {newAccount ? 'I want to login' : 'I want to sign in'}\n            </span>\n            <form onSubmit={onSubmit}>\n                <input\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    required\n                    value={email}\n                    name=\"email\"\n                    onChange={onChange}\n                />\n                <input\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    name=\"password\"\n                    required\n                    onChange={onChange}\n                />\n                <button type=\"submit\">\n                    {newAccount ? 'Sign Up' : 'Log In'}\n                </button>\n            </form>\n            <div>\n                <button name=\"google\" onClick={onSocialLogin}>\n                    Continue with Google\n                </button>\n                <button name=\"github\" onClick={onSocialLogin}>\n                    Continue with Github\n                </button>\n            </div>\n            {error && (\n                <div class=\"error-message\" style={{ border: '1px solid red' }}>\n                    {error}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Auth;\n","import React, { useCallback, useState } from 'react';\nimport { db, storage } from 'firebaseInstance';\nconst Tweet = ({ tweet, isMine }) => {\n    const [editMode, setEditMode] = useState(false);\n    const [editContent, setEditContent] = useState('');\n\n    const onDelete = useCallback(async () => {\n        try {\n            const confirmResult = window.confirm('are you sure?');\n            if (!confirmResult) return;\n            await db.collection('tweets').doc(tweet.id).delete();\n            await storage.refFromURL(tweet.imgUrl).delete();\n        } catch (error) {\n            console.error(error);\n        }\n    }, []);\n\n    const onToggleEditMode = useCallback(() => {\n        setEditMode((prev) => !prev);\n    }, []);\n\n    const onChangeEditContent = useCallback((e) => {\n        setEditContent(e.target.value);\n    }, []);\n\n    const onSubmitEditContent = useCallback(\n        async (e) => {\n            e.preventDefault();\n            const targetDocRef = db.collection('tweets').doc(tweet.id);\n            try {\n                await targetDocRef.update({\n                    content: editContent,\n                });\n                setEditContent('');\n                setEditMode(false);\n            } catch (error) {\n                console.log(error);\n            }\n        },\n        [editContent, tweet.id]\n    );\n    return (\n        <div\n            style={{\n                borderBottom: '3px solid black',\n                padding: '1rem',\n                margin: '0.5rem',\n            }}\n        >\n            <h3>{tweet.content}</h3>\n            {tweet.imgUrl && (\n                <div\n                    style={{\n                        backgroundImage: `url(${tweet.imgUrl})`,\n                        backgroundPosition: 'center',\n                        backgroundSize: 'cover',\n                        width: '300px',\n                        height: '300px',\n                    }}\n                ></div>\n            )}\n            <div>{tweet.userId}</div>\n            {isMine && <button onClick={onDelete}>DELETE</button>}\n            {isMine && !editMode && (\n                <button onClick={onToggleEditMode}>EDIT</button>\n            )}\n            {editMode && (\n                <form onSubmit={onSubmitEditContent}>\n                    <textarea\n                        value={editContent}\n                        onChange={onChangeEditContent}\n                    />\n                    <div>\n                        <button type=\"submit\">EDIT</button>\n                        <button onClick={onToggleEditMode}>CANCEL</button>\n                    </div>\n                </form>\n            )}\n        </div>\n    );\n};\n\nexport default Tweet;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { db, storage } from 'firebaseInstance';\nimport Tweet from '../components/Tweet';\nimport { v4 as uuid4 } from 'uuid';\nconst Home = ({ user }) => {\n    const [tweet, setTweet] = useState('');\n    const [tweets, setTweets] = useState([]);\n    const [imgDataUrl, setImgDataUrl] = useState(null);\n\n    const onClearImage = useCallback(() => {\n        setImgDataUrl(null);\n    }, [setImgDataUrl]);\n    const onChange = useCallback((e) => {\n        const { name, value } = e.target;\n        if (name === 'tweet') {\n            setTweet(value);\n        }\n    }, []);\n\n    const onFileChange = useCallback((e) => {\n        const files = e.target.files;\n        if (files.length > 1)\n            return alert('you cannot upload file greater than 1');\n        const targetFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => {\n            setImgDataUrl(finishedEvent.target.result);\n        };\n        reader.readAsDataURL(targetFile);\n    }, []);\n\n    const onSubmit = useCallback(\n        async (e) => {\n            e.preventDefault();\n            let imgUrl;\n            try {\n                if (imgDataUrl) {\n                    const fileRef = storage\n                        .ref()\n                        .child(`${user.uid}/${uuid4()}`);\n                    const uploadTaskSnapshot = await fileRef.putString(\n                        imgDataUrl,\n                        'data_url'\n                    );\n                    imgUrl = await uploadTaskSnapshot.ref.getDownloadURL();\n                    await db.collection('tweets').add({\n                        content: tweet,\n                        createdAt: Date.now(),\n                        userId: user.uid,\n                        imgUrl,\n                    });\n                } else {\n                    await db.collection('tweets').add({\n                        content: tweet,\n                        createdAt: Date.now(),\n                        userId: user.uid,\n                    });\n                }\n                setTweet('');\n                setImgDataUrl(null);\n            } catch (error) {\n                console.error(error);\n            }\n        },\n        [tweet, imgDataUrl, user.uid]\n    );\n    useEffect(() => {\n        db.collection('tweets').onSnapshot((querySnapshot) => {\n            const tweetsArr = querySnapshot.docs.map((doc) => ({\n                id: doc.id,\n                ...doc.data(),\n            }));\n            setTweets(\n                tweetsArr.sort(\n                    (a, b) => parseInt(b.createdAt) - parseInt(a.createdAt)\n                )\n            );\n        });\n    }, []);\n\n    return (\n        <>\n            <form onSubmit={onSubmit}>\n                <div>\n                    <input\n                        type=\"text\"\n                        name=\"tweet\"\n                        value={tweet}\n                        onChange={onChange}\n                        placeholder=\"what's on your mind\"\n                    />\n                </div>\n                <div>\n                    <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={onFileChange}\n                    />\n                    <div>\n                        {imgDataUrl && (\n                            <div\n                                style={{\n                                    backgroundImage: `url(${imgDataUrl})`,\n                                    backgroundPosition: 'center',\n                                    backgroundSize: 'cover',\n                                    width: '300px',\n                                    height: '300px',\n                                    position: 'relative',\n                                }}\n                            >\n                                <button\n                                    style={{\n                                        position: 'absolute',\n                                        top: '1px',\n                                        right: '1px',\n                                        cursor: 'pointer',\n                                    }}\n                                    onClick={onClearImage}\n                                >\n                                    X\n                                </button>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                <button type=\"submit\">tweet</button>\n            </form>\n            <div>\n                {tweets &&\n                    tweets.map((tweet) => (\n                        <Tweet\n                            key={tweet.id}\n                            tweet={tweet}\n                            isMine={user.uid === tweet.userId}\n                        />\n                    ))}\n            </div>\n        </>\n    );\n};\n\nexport default Home;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { auth, db } from 'firebaseInstance';\nimport Tweet from 'components/Tweet';\nconst Profile = ({ user, refreshUser }) => {\n    const history = useHistory();\n    const [myTweets, setMyTweets] = useState([]);\n    const [newDisplayName, setNewDisplayName] = useState(user.displayName);\n    const onChangeDisplayName = useCallback((e) => {\n        setNewDisplayName(e.target.value);\n    }, []);\n\n    const onSubmitDisplayName = useCallback(\n        async (e) => {\n            e.preventDefault();\n            if (newDisplayName === user.displayName) return;\n            try {\n                await user.updateProfile({\n                    displayName: newDisplayName,\n                });\n                refreshUser();\n            } catch (error) {\n                console.error(error);\n            }\n        },\n        [newDisplayName, user, refreshUser]\n    );\n\n    const getMyTweets = useCallback(async () => {\n        const fetchedTweets = [];\n        const querySnapshot = await db\n            .collection('tweets')\n            .where('userId', '==', user.uid)\n            .orderBy('createdAt', 'desc')\n            .get();\n        querySnapshot.forEach((doc) => {\n            fetchedTweets.push({ id: doc.id, ...doc.data() });\n        });\n        setMyTweets(fetchedTweets);\n    }, [user.uid]);\n\n    const logoutHandler = useCallback(async () => {\n        await auth.signOut();\n        history.replace('/');\n    }, [history]);\n\n    useEffect(() => {\n        getMyTweets();\n    }, [getMyTweets]);\n\n    return (\n        <>\n            <div>\n                <div>\n                    <img\n                        style={{\n                            width: '100px',\n                            height: '100px',\n                            borderRadius: '50%',\n                        }}\n                        src={user.photoURL}\n                        alt=\"profile img\"\n                    />\n                </div>\n                <button onClick={logoutHandler}>logout</button>\n            </div>\n            <form onSubmit={onSubmitDisplayName}>\n                <input\n                    type=\"text\"\n                    value={newDisplayName}\n                    onChange={onChangeDisplayName}\n                />\n                <button type=\"submit\">change</button>\n            </form>\n            <div>\n                {myTweets.map((tweet) => (\n                    <Tweet key={tweet.id} tweet={tweet} isMine={true} />\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default Profile;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nconst Navigation = ({user}) => {\n    return (\n        <nav>\n            <ul>\n                <li><Link to=\"/\">Home</Link></li>\n                <li><Link to=\"/profile\">{user.displayName}'s Profile</Link></li>\n            </ul>\n        </nav>\n    );\n};\n\nexport default Navigation;\n","import React from 'react';\nimport { Redirect, BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Auth from 'routes/Auth';\nimport Home from 'routes/Home';\nimport Profile from 'routes/Profile';\nimport Navigation from 'components/Navigation';\nconst Router = ({ isLoggedIn, user, refreshUser }) => {\n    return (\n        <BrowserRouter>\n            {isLoggedIn && <Navigation user={user}/>}\n            <Switch>\n                {isLoggedIn ? (\n                    <>\n                        <Route path=\"/\" exact>\n                            <Home user={user} />\n                        </Route>\n                        <Route path=\"/profile\" exact>\n                            <Profile user={user} refreshUser={refreshUser}/>\n                        </Route>\n                    </>\n                ) : (\n                    <>\n                        <Route path=\"/\" exact component={Auth} />\n                    </>\n                )}\n                <Redirect from=\"*\" to=\"/\" />\n            </Switch>\n        </BrowserRouter>\n    );\n};\n\nexport default Router;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport Router from './Router';\nimport { auth } from 'firebaseInstance';\n\nconst App = () => {\n    const [isInitialized, setIsInitialized] = useState(false);\n    const [user, setUser] = useState(null);\n    const refreshUser = useCallback(() => {\n        const user = auth.currentUser;\n        setUser({\n            displayName: user.displayName,\n            uid: user.uid,\n            photoURL: user.photoURL,\n            updateProfile: (args) => user.updateProfile(args),\n        });\n    }, []);\n    useEffect(() => {\n        auth.onAuthStateChanged((user) => {\n            if (user) {\n                //logined case\n                setUser({\n                    displayName: user.displayName,\n                    uid: user.uid,\n                    photoURL: user.photoURL,\n                    updateProfile: (args) => user.updateProfile(args),\n                });\n            } else {\n                //logout case\n                setUser(null);\n            }\n            return setIsInitialized(true);\n        });\n    }, []);\n\n    return (\n        <>\n            {isInitialized ? (\n                <>\n                    <Router\n                        isLoggedIn={Boolean(user)}\n                        user={user}\n                        refreshUser={refreshUser}\n                    />\n                    <footer>\n                        &copy; Simple Twit {new Date().getFullYear()}\n                    </footer>{' '}\n                </>\n            ) : (\n                <div>loading...</div>\n            )}\n        </>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}